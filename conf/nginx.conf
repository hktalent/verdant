
user verdant;               #运行用户
worker_processes  4;        #启动进程,通常设置成和cpu的数量相等
worker_rlimit_nofile 30000; #worker进程最大打开文件数限制，常大于worker_connections

#工作模式及连接数上限
events {
	use  epoll;                #仅限于linux2.6以上内核
	worker_connections  1024;  #单个后台worker process进程的最大并发链接数
	# multi_accept on;
}

http {
	#设定mime类型，类型由mime.type文件定义
	include  /etc/nginx/mime.types;          #文件扩展名与文件类型映射表
	default_type  application/octet-stream;  #默认文件类型

    #其他配置文件
	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;

	charset utf-8;                     #默认编码
	server_names_hash_bucket_size 128; #服务器名字的hash表大小 
	client_header_buffer_size 1k;      #上传文件大小限制

	#缓冲池
	large_client_header_buffers 4 4k;  #设定请求缓冲池
 	client_max_body_size 8m;           #设定请求缓冲池

	#日志
	access_log  /var/log/nginx/access.log;
	error_log  /var/log/nginx/error.log;

	#sendfile指定nginx对于普通应用是否调用sendfile函数（zero copy）来输出文件
	#通常设为on，对于下载等磁盘IO重负载应用可设为off，以平衡磁盘与网络I/O处理速度，降低系统的uptime
	sendfile  on;

	#网络相关
	tcp_nopush on;          #防止网络阻塞
	tcp_nodelay on;         #防止网络阻塞
	keepalive_timeout 120;  #长连接超时时间，单位是秒

	#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度
	#具体的PHP还是通过PHP-FPM来处理的
	fastcgi_connect_timeout 300;
	fastcgi_send_timeout 300;
	fastcgi_read_timeout 300;
	fastcgi_buffer_size 64k;
	fastcgi_buffers 4 64k;
	fastcgi_busy_buffers_size 128k;
	fastcgi_temp_file_write_size 128k;

	#gzip模块设置
	gzip on;  #开启gzip压缩输出
	gzip_min_length 1k;  #最小压缩文件大小
	gzip_buffers 4 16k;  #压缩缓冲区
	gzip_http_version 1.0;  #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）
	gzip_comp_level 2;  #压缩等级
	gzip_types application/x-javascript text/css application/xml; #压缩类型，默认包含text/html

	#设定负载均衡的服务器列表（weigth参数表示权值，权值越高被分配到的几率越大）
	upstream mysvr {
		server 192.168.8.1:3128  weight=5;  #本机上的Squid开启3128端口
		server 192.168.8.2:80  weight=1;
		server 192.168.8.3:80  weight=6;
		ip_hash;  #将某个ip的请求定向到同一台后端
	}

	server {
		listen  80;                            #侦听80端口
		server_name  192.168.1.61;             #定义使用192.168.1.61访问，可以配置多个
		index index.php index.html index.htm;  #定义首页索引文件的名称
		root /data/verdant;                     #定义服务器的默认根目录位置（可为每个location指定）
		#access_log  /var/log/nginx/xx.access.log  access;  #设定本虚拟主机的访问日志
		#log_format access '$remote_addr - $remote_user [$time_local] "$request" '
		 #	'$status $body_bytes_sent "$http_referer" ' 
		#	'"$http_user_agent" $http_x_forwarded_for';  #日志格式
		
		#本地动静分离反向代理配置
		#所有jsp的页面均交由tomcat或resin处理 
		location ~ .(jsp|jspx|do)?$ {
			proxy_set_header Host $host;
 			proxy_set_header X-Real-IP $remote_addr; 
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 
			proxy_pass http://127.0.0.1:8080;
 		}

		#PHP 脚本请求全部转发到 FastCGI处理
		location ~ .*\.(php|php5)?$ { 
			root html;
			fastcgi_pass 127.0.0.1:9000; 
			fastcgi_index index.php; 
			fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
			include fastcgi_param; 
		}

 
 		#静态文件，nginx自己处理
		location ~ ^/(images|javascript|js|css|flash|media|static)/ {
			root html;
			expires 30d;
		}

		#图片缓存时间设置
 		location ~  .*\.(gif|jpg|jpeg|png|bmp|swf)$ { 
			expires 10d; 
		}

 		#JS和CSS缓存时间设置 
		location ~  .*\.(js|css)?$ {
 			expires 1h; 
		}

		#禁止访问 .htxxx 文件
		location ~ /\.ht {
			deny all;
		}

		# 定义错误提示页面
		error_page  500 502 503 504  /50x.html;
		location = /50x.html {
			root  /root;
		}

		#对"/"启用反向代理
		location / {
			proxy_pass http:// mysvr;    #请求转向mysvr 定义的服务器列表
			proxy_redirect off; 
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
			#反向代理可选配置
			proxy_set_header Host $host;
			proxy_connect_timeout 90;        #nginx跟后端服务器连接超时时间(代理连接超时)
			proxy_read_timeout 90;           #连接成功后，后端服务器响应时间(代理接收超时)
			client_max_body_size 10m;        #允许客户端请求的最大单文件字节数
			client_body_buffer_size 128k;    #缓冲区代理缓冲用户端请求的最大字节数，
			proxy_connect_timeout 90;        #nginx跟后端服务器连接超时时间(代理连接超时)
			proxy_send_timeout 90;           #后端服务器数据回传时间(代理发送超时)
			proxy_read_timeout 90;           #连接成功后，后端服务器响应时间(代理接收超时)
			proxy_buffer_size 4k;            #nginx保存用户头信息的缓冲区大小
			proxy_buffers 4 32k;             #proxy_buffers缓冲区（网页平均在32k以下的设置）
			proxy_busy_buffers_size 64k;     #高负荷下缓冲大小（proxy_buffers*2）
			proxy_temp_file_write_size 64k;  #缓存文件夹大小，大于将从upstream服务器传
		}

		#设定查看Nginx状态的地址
		location /NginxStatus {
			stub_status on;
			access_log on;
			auth_basic "NginxStatus";
			auth_basic_user_file  conf/htpasswd;
		}
	}
}
